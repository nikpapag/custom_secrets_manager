template:
  name: csm-custom-template
  identifier: csmcustomtemplate
  versionLabel: v1
  type: SecretManager
  projectIdentifier: devx_demo
  orgIdentifier: sandbox
  tags: {}
  spec:
    shell: Bash
    delegateSelectors: []
    source:
      type: Inline
      spec:
        script: |-
          export VAULT_ADDR=<+secretManager.environmentVariables.vault_addr>
          export VAULT_NAMESPACE=<+secretManager.environmentVariables.vault_namespace>
          export VAULT_SECRET_PATH=<+secretManager.environmentVariables.vault_path>
          export VAULT_ROLE=<+secretManager.environmentVariables.vault_role>
          export VAULT_REGION=<+secretManager.environmentVariables.vault_region>
          export VAULT_SECRET_KEY=<+secretManager.environmentVariables.vault_key>

          read -r -d '' script <<-"EOF"
          import os
          import boto3
          import botocore.session
          import base64
          import requests
          from botocore.awsrequest import AWSRequest
          from botocore.auth import SigV4Auth

          def get_iam_identity():
              sts_client = boto3.client('sts')
              identity = sts_client.get_caller_identity()
              return identity

          def create_signed_request(url, region, service, body=''):
              session = botocore.session.get_session()
              credentials = session.get_credentials().get_frozen_credentials()
              request = AWSRequest(
                  method='POST',
                  url=url,
                  data=body,
                  headers={
                      'Content-Type': 'application/x-www-form-urlencoded'
                  }
              )
              SigV4Auth(credentials, service, region).add_auth(request)
              return request.url, request.headers, body

          def lambda_handler():
              try:
                  iam_identity = get_iam_identity()

                  vault_url = f"{os.environ.get('VAULT_ADDR')}/v1/auth/aws/login"
                  vault_region = os.environ.get('VAULT_REGION')
                  vault_service = 'sts'
                  body = 'Action=GetCallerIdentity&Version=2011-06-15'

                  signed_url, signed_headers, signed_body = create_signed_request(vault_url, vault_region, vault_service, body)
                  signed_url_base64 = base64.b64encode(signed_url.encode()).decode()
                  signed_body_base64 = base64.b64encode(signed_body.encode()).decode()

                  auth_payload = {
                      'role': os.environ.get('VAULT_ROLE'),
                      'iam_http_request_method': 'POST',
                      'iam_request_url': signed_url_base64,
                      'iam_request_body': signed_body_base64,
                      'iam_request_headers': {k: v for k, v in signed_headers.items()}
                  }

                  headers = {
                      'Content-Type': 'application/json',
                      'accept': '*/*',
                      'X-Vault-Namespace': os.environ.get('VAULT_NAMESPACE', '')
                  }

                  response = requests.post(vault_url, json=auth_payload, headers=headers)
                 
                  return response.json()["auth"]["client_token"]
              except Exception as e:
                  print(f"An error occurred: {e}")
                  return {
                      'statusCode': 500,
                      'body': f"An error occurred: {e}"
                  }


          def retrieve_secret(client_token):
              vault_url = f"{os.environ.get('VAULT_ADDR')}"
              secret_path = f"{os.environ.get('VAULT_SECRET_PATH')}"
              secret_key = f"{os.environ.get('VAULT_SECRET_KEY')}"

              secret_response = requests.get(
              f"{vault_url}/v1/{secret_path}",
              headers={
                  "X-Vault-Token": client_token,
                  "X-Vault-Namespace": os.environ.get("VAULT_NAMESPACE", ""),
              })
              if secret_response.status_code == 200:
                  secret_data = secret_response.json()["data"]["data"][secret_key]
                  return(secret_data)
              else:
                  print("Failed to fetch secret:", secret_response.text)

          vault_token = lambda_handler()
          value=retrieve_secret(vault_token)
          print(value)
          EOF
          secret=$(python3 -c "$script")
    environmentVariables:
      - name: vault_addr
        type: String
        value: <<replace_with_vault_url>>
      - name: vault_namespace
        type: String
        value: <<replace_with_vault_namespace>>
      - name: vault_path
        type: String
        value: <<replace_with_secret_path>>
      - name: vault_role
        type: String
        value: <<replace_with_vault_role>>
      - name: vault_region
        type: String
        value: <<replace_with_region>>
      - name: vault_key
        type: String
        value: <+input>
    outputVariables: []
    onDelegate: true
